# Blackboard Parser Language v1.0

> (Start);

# Binary
(Start): '0' => (Zero);
(Zero): '01' => (PossibleBin);
(Start): '1' => (PossibleBin): '01' => (PossibleBin);
(Zero):        ^'b' => [Bin];
(PossibleBin): ^'b' => [Bin];

# Octal
(Start):       '2'..'7' => (PossibleOct): '0'..'7' => (PossibleOct);
(Zero):        '2'..'7' => (PossibleOct);
(PossibleBin): '2'..'7' => (PossibleOct);
(Zero):        ^'o' => [Oct];
(PossibleBin): ^'o' => [Oct];
(PossibleOct): ^'o' => [Oct];

# Integers (Decimal)
(Start): '89' => (Int): '0'..'9' => (Int);
(Zero):  '89' => (Int);
(PossibleBin): '2'..'9' => (Int);
(PossibleOct): '89' => (Int);

(Zero)        => [Int];
(PossibleBin) => [Int];
(PossibleOct) => [Int];
(Int)         => [Int];
(Zero):        ^'d' => [Int];
(PossibleBin): ^'d' => [Int];
(PossibleOct): ^'d' => [Int];
(Int):         ^'d' => (Dec) => [Int];

# Hexadecimals
(Zero): 'x' => (HexStart): '0'..'9', 'a'..'f', 'A'..'F' => (Hex): '0'..'9', 'a'..'f', 'A'..'F' => [Hex];

# Doubles
(Start):       '.' => (Decimal);
(Zero):        '.' => (Decimal);
(PossibleBin): '.' => (Decimal);
(PossibleOct): '.' => (Decimal);
(Int):         '.' => (Decimal);
(Decimal): '0'..'9' => (DoubleDec): '0'..'9' => (DoubleDec) => [Double];

(Zero):        'eE' => (DoubleExpStart);
(Int):         'eE' => (DoubleExpStart);
(PossibleBin): 'eE' => (DoubleExpStart);
(PossibleOct): 'eE' => (DoubleExpStart);
(DoubleDec):   'eE' => (DoubleExpStart);
(DoubleExpStart): '-' => (DoubleExpNeg): '0'..'9' => (DoubleExp);
(DoubleExpStart): '0'..'9' => (DoubleExp): '0'..'9' => (DoubleExp) => [Double];

# Identifiers
(Start): 'a'..'z', 'A'..'Z', '_$' => (Identifier): '0'..'9', 'a'..'z', 'A'..'Z', '_' => [Identifier];

# Strings
(Start): ^"'" => (String1Body): ^"'" => [String];
(String1Body): '\\' => (Escaped1);
(Escaped1): '\\\'"0abfnrtv' => (String1Body);
(Escaped1): 'x' => (Ascii1_0):   '0'..'9', 'a'..'f', 'A'..'F' =>
                   (Ascii1_1):   '0'..'9', 'a'..'f', 'A'..'F' => (String1Body);
(Escaped1): 'u' => (Unicode1_0): '0'..'9', 'a'..'f', 'A'..'F' =>
                   (Unicode1_1): '0'..'9', 'a'..'f', 'A'..'F' =>
                   (Unicode1_2): '0'..'9', 'a'..'f', 'A'..'F' =>
                   (Unicode1_3): '0'..'9', 'a'..'f', 'A'..'F' => (String1Body);
(String1Body): * => (String1Body);

(Start): ^'"' => (String2Body): ^'"' => [String];
(String2Body): '\\' => (Escaped2);
(Escaped2): '\\\'"0abfnrtv' => (String2Body);
(Escaped2): 'x' => (Ascii2_0):   '0'..'9', 'a'..'f', 'A'..'F' =>
                   (Ascii2_1):   '0'..'9', 'a'..'f', 'A'..'F' => (String2Body);
(Escaped2): 'u' => (Unicode2_0): '0'..'9', 'a'..'f', 'A'..'F' =>
                   (Unicode2_1): '0'..'9', 'a'..'f', 'A'..'F' =>
                   (Unicode2_2): '0'..'9', 'a'..'f', 'A'..'F' =>
                   (Unicode2_3): '0'..'9', 'a'..'f', 'A'..'F' => (String2Body);
(String2Body): * => (String2Body);

# Symbols
(Start): '&' => [And]: '&' => [LogicalAnd];
(Start): '|' => [Or]: '|' => [LogicalOr];
(Start): '+' => [Pos];
(Start): '-' => [Neg]: '>' => [Trigger];
(Start): '/' => [Div];
(Start): '*' => [Mul]: '*' => [Power];
(Start): '%' => [Mod]: '%' => [Remainder];
(Start): '^' => [Xor]: '^' => [LogicalXor];
(Start): '~' => [Invert];
(Start): '?' => [Test];
(Start): ':' => [Else]: '=' => [Define];
(Start): ';' => [End];
(Start): ',' => [Comma];
(Start): '.' => [Dot];

(Start): '(' => [ParOpen];
(Start): ')' => [ParClose];
(Start): '[' => [SqrOpen];
(Start): ']' => [SqrClose];
(Start): '{' => [CurlOpen];
(Start): '}' => [CurlClose];

(Start): '=' => [Assign]:  '=' => [Equal];
(Start): '>' => [Greater]: '=' => [GreaterEqual];
(Start): '<' => [Less]:    '=' => [LessEqual];
(Start): '!' => [Not]:     '=' => [NotEqual];
(Greater): '>' => [ShiftRight];
(Less):    '<' => [ShiftLeft];

# Comments
(Div): '/' => (CommentSingle): !'\n' => (CommentSingle) => ^[Comment];
(Div): '*' => (CommentMultiple): '*' => (CommentMultipleEnd): '/' => (CommentEnd) => ^[Comment];
(CommentMultiple): * => (CommentMultiple);
(CommentMultipleEnd): * => (CommentMultiple);

# Whitespace
(Start): ' \t\n' => (Whitespace): ' \t\n' => ^[Whitespace];

# Specific Keywords
[Identifier] = 'true', 'false' => [Bool];
[Identifier] = 'namespace' => [Namespace];
[Identifier] = 'var' => [Var];

[Identifier] = 'in'      => [DeclareIn];
[Identifier] = 'get'     => [DeclareGet];
[Identifier] = 'const'   => [DeclareConst];
[Identifier] = 'define'  => [DeclareDefine];
[Identifier] = 'counter' => [DeclareCounter];
[Identifier] = 'latch'   => [DeclareLatch];
[Identifier] = 'toggle'  => [DeclareToggle];

[Identifier] = 'bool'    => [TypeBool];
[Identifier] = 'int'     => [TypeInt];
[Identifier] = 'double'  => [TypeDouble];
[Identifier] = 'string'  => [TypeString];
[Identifier] = 'trigger' => [TypeTrigger];

# Reserved Identifiers (Keeping options open for future versions)
[Identifier] = 'byte', 'char', 'enum', 'float', 'int8', 'int16', 'int32', 'int64',
               'list', 'long', 'map', 'set', 'short', 'struct', 'type', 'uint',
               'uint8', 'uint16', 'uint32', 'uint64', 'ulong', 'ushort' => [ReservedTypes];

[Identifier] = 'internal', 'global', 'local',
               'private', 'protected', 'public', 'static' => [ReservedScoping];

[Identifier] = 'abstract', 'class', 'def', 'func', 'interface', 'operator',
               'override', 'typedef', 'void', 'virtual' => [ReservedDefinitions];

[Identifier] = 'as', 'break', 'catch', 'case', 'continue', 'default', 'else',
               'finally', 'go', 'if', 'import', 'intersect', 'is', 'out', 'return', 'select',
               'switch', 'then', 'try', 'typeof', 'union', 'using', 'when', 'yield' => [ReservedConstructs];

[Identifier] = 'complex', 'do', 'dynamic', 'for', 'foreach', 'goto',
               'label', 'null', 'readonly', 'sealed', 'until', 'while' => [ReservedUnsupported];

#==========================================================
# Grammar Rules

> <Code> := _
    | {clear} [Namespace] [Identifier] {pushNamespace} [CurlOpen] <Code> [CurlClose] {popNamespace} <Code>
    | {clear} <Statement> [End] <Code>;

<Statement> := _
    | <NewTypedInput>
    | <NewVarInput>
    | <Declaration>
#    | <DefineTypedRule>
#    | <DefineVarRule>
#    | <PullTrigger>
    ;

#----------------------------------------------------------

<NewTypedInput> := [DeclareIn] <RootType> <NewTypedInputPart> <NewTypedInputTail>;

<NewTypedInputTail> := _
    | [Comma] <NewTypedInputPart> <NewTypedInputTail>;

<NewTypedInputPart> := [Identifier] {pushId} {newTypeInputNoAssign}
    | [Identifier] {pushId} [Assign] <Declaration> {newTypeInputWithAssign};

#----------------------------------------------------------

<NewVarInput> := [DeclareIn] <NewVarInputPart> <NewVarInputTail>
    | [DeclareIn] [Var] <NewVarInputPart> <NewVarInputTail>;

<NewVarInputTail> := _
    | [Comma] <NewVarInputPart> <NewVarInputTail>;

<NewVarInputPart> := [Identifier] {pushId} [Assign] <Declaration> {newVarInputWithAssign};
    
#----------------------------------------------------------

###<DefineTypedRule> := {startDefine} [Type] {setType} <Id> [Define] <Conditional> {typeDefine};
###
###<DefineVarRule> := {startDefine} <Id> [Define] <Conditional> {varDefine};
###
###<PullTrigger> := [Trigger] <Id> {pullTrigger}
###    | <Conditional> [Trigger] <Id> {conditionalPullTrigger};
    
#==========================================================

<Declaration> := <Conditional>
    | <Declaration> [Assign] <Conditional> {assignment};

<Conditional> := <LogicalOr>
    | <Conditional> [Test] <Conditional> [Else] <Conditional> {trinary};

<LogicalOr> := <LogicalXor>
    | <LogicalOr> [LogicalOr] <LogicalXor> {logicalOr};
    
<LogicalXor> := <LogicalAnd>
    | <LogicalXor> [LogicalXor] <LogicalAnd> {logicalXor};

<LogicalAnd> := <Equality>
    | <LogicalAnd> [LogicalAnd] <Equality> {logicalAnd};

<Equality> := <Relational>
    | <Equality> [Equal]    <Relational> {equal}
    | <Equality> [NotEqual] <Relational> {notEqual};

<Relational> := <BitwiseOr>
    | <Relational> [Greater]      <BitwiseOr> {greater}
    | <Relational> [Less]         <BitwiseOr> {less}
    | <Relational> [GreaterEqual] <BitwiseOr> {greaterEqual}
    | <Relational> [LessEqual]    <BitwiseOr> {lessEqual};

<BitwiseOr> := <BitwiseXor>
    | <BitwiseOr> [Or] <BitwiseXor> {or};
    
<BitwiseXor> := <BitwiseAnd>
    | <BitwiseXor> [Xor] <BitwiseAnd> {xor};

<BitwiseAnd> := <BitwiseShift>
    | <BitwiseAnd> [And] <BitwiseShift> {and};

<BitwiseShift> := <Additive>
    | <BitwiseShift> [ShiftRight] <Additive> {shiftRight}
    | <BitwiseShift> [ShiftLeft]  <Additive> {shiftLeft};

<Additive> := <Multiplicative>
    | <Additive> [Pos] <Multiplicative> {sum}
    | <Additive> [Neg] <Multiplicative> {subtract};

<Multiplicative> := <Exponent>
    | <Multiplicative> [Mul]       <Exponent> {multiply}
    | <Multiplicative> [Div]       <Exponent> {divide}
    | <Multiplicative> [Mod]       <Exponent> {modulo}
    | <Multiplicative> [Remainder] <Exponent> {remainder};

<Exponent> := <Unary>
    | <Exponent> [Power] <Unary> {power};

<Unary> := <Expression>
    | [Neg]    <Expression> {negate}
    | [Not]    <Expression> {not}
    | [Pos]    <Expression>
    | [Invert] <Expression> {invert}
    | [ParOpen] <RootType> [ParClose] <Expression> {cast};

<Expression> := <Value>
    | [ParOpen] <Conditional> [ParClose]
    | <Expression> [Dot] [Identifier] {memberAccess}
    | <Expression> <Call>;

<Call> := [ParOpen] {startCall} <Args> [ParClose] {endCall};

<Args> := _
    | <Conditional> <ArgsTail>;

<ArgsTail> := _
    | [Comma] <Conditional> <ArgsTail>;

<Value> := [Identifier] {pushId}
    | [Bool]   {pushBool}
    | [Bin]    {pushBin}
    | [Oct]    {pushOct}
    | [Int]    {pushInt}
    | [Hex]    {pushHex}
    | [Double] {pushDouble}
    | [String] {pushString};

<RootType> := [TypeBool] {pushType}
    | [TypeInt]     {pushType}
    | [TypeDouble]  {pushType}
    | [TypeString]  {pushType}
    | [TypeTrigger] {pushType};
