# Blackboard Parser Language v1.0
#----------------------------------------------------------
# Grammar Rules

> <Code> := _
    | {clear} <Statement> <Code>;

<Statement> := <Namespace>
    | <NewInput>
    | <DefineRule>
    | <ProvokeTrigger>
    | <GetValue>
    | <TempValue>
    | <NewExtern>
    | <Declaration> [End];

#=========================================================#
# Namespace                                               #
#=========================================================#
# Namespace and nested namespaces.                        #
#   - namespace A { ... }                                 #
#=========================================================#

<Namespace> := [Namespace] [Identifier] {pushNamespace} [CurlOpen] <Code> [CurlClose] {popNamespace};

#=========================================================#
# New Input                                               #
#=========================================================#
# New input with type and optional initial assignment.    #
#   - in bool A;                                          #
#   - in double A, B, C;                                  #
#   - in int A = 3, B = 4, C;                             #
# New input without type and required initial assignment. #
#   - in A = 3;                                           #
#   - in A = true, B = "cat";                             #
#   - in var A = false;                                   #
# New input group.                                        #
#   - in { int A, B; C = true; }                          #
#   - in { namespace A { int B; } }                       #
#=========================================================#

<NewInput> := [DeclareIn] <NewInputHead> [End]
    | [DeclareIn] [CurlOpen] <NewInputGroup> [CurlClose];

<NewInputHead> := <RootType> <NewTypedInputPart> <NewTypedInputTail>
    | <NewVarInputPart> <NewVarInputTail>
    | [Var] <NewVarInputPart> <NewVarInputTail>;

<NewTypedInputTail> := _
    | [Comma] <NewTypedInputPart> <NewTypedInputTail>;

<NewTypedInputPart> := [Identifier] {defineId} {newTypeInputNoAssign}
    | [Identifier] {defineId} [Assign] <Declaration> {newTypeInputWithAssign};

<NewVarInputTail> := _
    | [Comma] <NewVarInputPart> <NewVarInputTail>;

<NewVarInputPart> := [Identifier] {defineId} [Assign] <Declaration> {newVarInputWithAssign};

<NewInputGroup> := _
    | <NewInputHead> [End] <NewInputGroup>
    | [Namespace] [Identifier] {pushNamespace} [CurlOpen] <NewInputGroup> [CurlClose] {popNamespace};

#=========================================================#
# Define                                                  #
#=========================================================#
# New define with type and sets the required rule.        #
#   - bool A := B & C;                                    #
#   - int A := B + C;                                     #
# New define without type and sets the required rule.     #
#   - A := B & C;                                         #
#   - var A := B + C;                                     #
# New define using the keyword and assignment of rule.    #
#   - define double A = B * 0.5;                          #
#   - define A = B * 0.5;                                 #
#   - define var A = B + "cat";                           #
# New define group                                        #
#   - define { int A = B + C; D = E + "cat"; }            #
#   - define { namespace A { int B = C + E; } }           #
#=========================================================#

<DefineRule> := <DefineDefine> [End]
    | [DeclareDefine] <DefineAssign> [End]
    | [DeclareDefine] [CurlOpen] <DefineGroup> [CurlClose];

<DefineDefine> := <RootType> <DefineDefinePart> {typeDefine}
    | <DefineDefinePart> {varDefine}
    | [Var] <DefineDefinePart> {varDefine};

<DefineDefinePart> := [Identifier] {defineId} [Define] <Conditional>;

<DefineAssign> := <RootType> <DefineAssignPart> {typeDefine}
    | <DefineAssignPart> {varDefine}
    | [Var] <DefineAssignPart> {varDefine};

<DefineAssignPart> := [Identifier] {defineId} [Assign] <Conditional>;

<DefineGroup> := _
    | <DefineAssign> [End] <DefineGroup>
    | [Namespace] [Identifier] {pushNamespace} [CurlOpen] <DefineGroup> [CurlClose] {popNamespace};

#=========================================================#
# Provoke                                                 #
#=========================================================#
# Unconditional trigger provoke.                          #
#   - -> A;                                               #
#   - -> A -> C -> D;                                     #
#   - -> B > 3 ? C : D;                                   #
# Conditional trigger provoke.                            #
#   - B > 3 -> A -> C;                                    #
#   - B < 3 -> C -> D;                                    #
#=========================================================#

<ProvokeTrigger> := [Trigger] <Conditional> {provokeTrigger} <ProvokeTriggerTail> [End]
    | <Conditional> [Trigger] <Conditional> {conditionalProvokeTrigger} <ConditionalProvokeTriggerTail> [End];
    
<ProvokeTriggerTail> := _
    | [Trigger] <Conditional> {provokeTrigger} <ProvokeTriggerTail>;

<ConditionalProvokeTriggerTail> := _
    | [Trigger] <Conditional> {conditionalProvokeTrigger} <ConditionalProvokeTriggerTail>;

#=========================================================#
# Get Value                                               #
#=========================================================#
# New get with type and optional initial assignment.      #
#   - get bool A;                                         #
#   - get double A, B, C;                                 #
#   - get int A = 3, B = 4, C;                            #
# New get without type and required initial assignment.   #
#   - get A = 3;                                          #
#   - get A = true, B = "cat";                            #
#   - get var A = false;                                  #
# New get group.                                          #
#   - get { int A, B; C = true; }                         #
#   - get { namespace A { int B; } }                      #
#=========================================================#

<GetValue> := [DeclareGet] <GetDefine> [End]
    | [DeclareGet] [CurlOpen] <GetValueGroup> [CurlClose];

<GetDefine> := <RootType> <GetTypedValuePart> <GetTypedValueTail>
    | <GetVarValuePart> <GetVarValueTail>
    | [Var] <GetVarValuePart> <GetVarValueTail>;

<GetTypedValueTail> := _
    | [Comma] <GetTypedValuePart> <GetTypedValueTail>;

<GetTypedValuePart> := [Identifier] {defineId} {pushId} {typeGet}
    | [Identifier] {defineId} [Assign] <Conditional> {typeGet};

<GetVarValueTail> := _
    | [Comma] <GetVarValuePart> <GetVarValueTail>;

<GetVarValuePart> := [Identifier] {defineId} {pushId} {varGet}
    | [Identifier] {defineId} [Assign] <Conditional> {varGet};
    
<GetValueGroup> := _
    | <GetDefine> [End] <GetValueGroup>
    | [Namespace] [Identifier] {pushNamespace} [CurlOpen] <GetValueGroup> [CurlClose] {popNamespace};

#=========================================================#
# Temp Value                                              #
#=========================================================#
# New temp with type and initial assignment.              #
#   - in bool A = true;                                   #
#   - in int B = 4, C = 6;                                #
# New temp without type and initial assignment.           #
#   - temp A = 3;                                         #
#   - temp A = true, B = "cat";                           #
#   - temp var A = false;                                 #
# New temp group.                                         #
#   - temp { int A = 12; B = true; }                      #
#   - temp { namespace A { B = true; } }                  #
#=========================================================#

<TempValue> := [DeclareTemp] <TempDefine> [End]
    | [DeclareTemp] [CurlOpen] <TempValueGroup> [CurlClose];

<TempDefine> := <RootType> <TempTypedValuePart> <TempTypedValueTail>
    | <TempVarValuePart> <TempVarValueTail>
    | [Var] <TempVarValuePart> <TempVarValueTail>;

<TempTypedValueTail> := _
    | [Comma] <TempTypedValuePart> <TempTypedValueTail>;

<TempTypedValuePart> := [Identifier] {defineId} [Assign] <Conditional> {typeTemp};

<TempVarValueTail> := _
    | [Comma] <TempVarValuePart> <TempVarValueTail>;

<TempVarValuePart> := [Identifier] {defineId} [Assign] <Conditional> {varTemp};
    
<TempValueGroup> := _
    | <TempDefine> [End] <TempValueGroup>
    | [Namespace] [Identifier] {pushNamespace} [CurlOpen] <TempValueGroup> [CurlClose] {popNamespace};

#=========================================================#
# New Extern                                              #
#=========================================================#
# New extern with type and optional initial assignment.   #
#   - extern bool A;                                      #
#   - extern double A, B, C;                              #
#   - extern int A = 3, B = 4, C;                         #
# New extern group.                                       #
#   - extern { int A, B; bool C = true; }                 #
#   - extern { namespace A { bool B = true; } }           #
#=========================================================#

<NewExtern> := [DeclareExtern] <NewExternHead> [End]
    | [DeclareExtern] [CurlOpen] <NewExternGroup> [CurlClose];

<NewExternHead> := <RootType> <NewExternPart> <NewExternTail>;

<NewExternTail> := _
    | [Comma] <NewExternPart> <NewExternTail>;

<NewExternPart> := [Identifier] {defineId} {externNoAssign}
    | [Identifier] {defineId} [Assign] <Declaration> {externWithAssign};

<NewExternGroup> := _
    | <NewExternHead> [End] <NewExternGroup>
    | [Namespace] [Identifier] {pushNamespace} [CurlOpen] <NewExternGroup> [CurlClose] {popNamespace};

#=========================================================#
# Declarations                                            #
#=========================================================#

<Declaration> := <Conditional>
    | <Conditional> [Assign] <Declaration> {assignment};
    
<Conditional> := <LogicalOr>
    | <LogicalOr> [Test] <Conditional> [Else] <Conditional> {ternary};

<LogicalOr> := <LogicalXor>
    | <LogicalOr> [LogicalOr] <LogicalXor> {logicalOr};
    
<LogicalXor> := <LogicalAnd>
    | <LogicalXor> [LogicalXor] <LogicalAnd> {logicalXor};

<LogicalAnd> := <Equality>
    | <LogicalAnd> [LogicalAnd] <Equality> {logicalAnd};

<Equality> := <Relational>
    | <Equality> [Equal]    <Relational> {equal}
    | <Equality> [NotEqual] <Relational> {notEqual};

<Relational> := <BitwiseOr>
    | <Relational> [Greater]      <BitwiseOr> {greater}
    | <Relational> [Less]         <BitwiseOr> {less}
    | <Relational> [GreaterEqual] <BitwiseOr> {greaterEqual}
    | <Relational> [LessEqual]    <BitwiseOr> {lessEqual};

<BitwiseOr> := <BitwiseXor>
    | <BitwiseOr> [Or] <BitwiseXor> {or};
    
<BitwiseXor> := <BitwiseAnd>
    | <BitwiseXor> [Xor] <BitwiseAnd> {xor};

<BitwiseAnd> := <BitwiseShift>
    | <BitwiseAnd> [And] <BitwiseShift> {and};

<BitwiseShift> := <Additive>
    | <BitwiseShift> [ShiftRight] <Additive> {shiftRight}
    | <BitwiseShift> [ShiftLeft]  <Additive> {shiftLeft};

<Additive> := <Multiplicative>
    | <Additive> [Pos] <Multiplicative> {sum}
    | <Additive> [Neg] <Multiplicative> {subtract};

<Multiplicative> := <Exponent>
    | <Multiplicative> [Mul] <Exponent> {multiply}
    | <Multiplicative> [Div] <Exponent> {divide}
    | <Multiplicative> [Mod] <Exponent> {modulo};

<Exponent> := <Castable>
    | <Exponent> [Power] <Castable> {power};

<Castable> := <Unary>
    | [ParOpen] <RootType> [ParClose] <Unary> {cast};

<Unary> := <Expression>
    | [Neg]    <Expression> {negate}
    | [Not]    <Expression> {not}
    | [Invert] <Expression> {invert};

<Expression> := <Value>
    | [ParOpen] <Conditional> [ParClose]
    | <Expression> [Dot] [Identifier] {memberAccess}
    | <Expression> <Call>;

<Call> := [ParOpen] {startCall} <Args> {endCall} [ParClose];

<Args> := _
    | <Conditional> {addArg} <ArgsTail>;

<ArgsTail> := _
    | [Comma] <Conditional> {addArg} <ArgsTail>;

<Value> := [Identifier] {pushId}
    | [Bool]   {pushBool}
    | [Null]   {pushNull}
    | [Bin]    {pushBin}
    | [Oct]    {pushOct}
    | [Int]    {pushInt}
    | [Hex]    {pushHex}
    | [Double] {pushDouble}
    | [String] {pushString};

<RootType> := [TypeBool] {pushType}
    | [TypeInt]     {pushType}
    | [TypeUint]    {pushType}
    | [TypeFloat]   {pushType}
    | [TypeDouble]  {pushType}
    | [TypeString]  {pushType}
    | [TypeTrigger] {pushType}
    | [TypeObject]  {pushType};
